esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: true

esp8266:
  board: esp8285
  restore_from_flash: true

preferences:
  flash_write_interval: 5min

api:

logger:
  level: INFO
  id: log
  
ota:
  - platform: esphome

mdns:

web_server:
  port: 80
  version: 3

wifi:
  ap: {}

captive_portal:

binary_sensor:
  - platform: status
    name: "Status"
    entity_category: diagnostic    
    web_server_sorting_weight: 1

button:
  - platform: factory_reset
    name: Factory Reset
    id: Reset
    entity_category: config
    web_server_sorting_weight: 3

  - platform: restart
    name: Restart Device
    id: Restart
    entity_category: config
    web_server_sorting_weight: 1

  - platform: safe_mode
    name: "Safe Mode"
    id: Safe_mode
    entity_category: config
    web_server_sorting_weight: 2

sensor:
  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor
    entity_category: diagnostic
    internal: true

  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: diagnostic
    web_server_sorting_weight: 8

  # Reports the WiFi signal strength in %
  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Strength"
    id: wifi_strength
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: diagnostic
    web_server_sorting_weight: 7

text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
      entity_category: diagnostic
      web_server_sorting_weight: 5
    ssid:
      name: Connected SSID
      entity_category: diagnostic
      web_server_sorting_weight: 4
    mac_address:
      name: Mac Address
      entity_category: diagnostic
      disabled_by_default: true
      web_server_sorting_weight: 6

  - platform: template
    name: 'Last Restart'
    id: device_last_restart
    icon: mdi:clock
    entity_category: diagnostic
    web_server_sorting_weight: 3

  - platform: template
    name: "Uptime"
    entity_category: diagnostic
    lambda: |-
      int seconds = (id(uptime_sensor).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      if ( days > 3650 ) {
        return { "Starting up" };
      } else if ( days ) {
        return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( hours ) {
        return { (String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( minutes ) {
        return { (String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else {
        return { (String(seconds) +"s").c_str() };
      }
    icon: mdi:clock-start
    web_server_sorting_weight: 2

time:
  - platform: sntp
    id: sntp_time
  # Change sync interval from default 5min to 6 hours
    update_interval: 24h
  # Publish the time the device was last restarted, but only once.
    on_time_sync:
      then:
        - if:
            condition:
              lambda: 'return id(device_last_restart).state == "";'
            then:
              - text_sensor.template.publish:
                  id: device_last_restart
                  state: !lambda 'return id(sntp_time).now().strftime("%a %d %b %Y - %I:%M:%S %p");'
